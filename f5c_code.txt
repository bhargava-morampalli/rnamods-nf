    f5c_e_n_16s = f5cindex_n_16s.out.fastqindex.mix(mappedbamindex_16s_native.out.mappedbamindex).groupTuple(by: 2).view()
    f5c_e_n_23s = f5cindex_n_23s.out.fastqindex.mix(mappedbamindex_23s_native.out.mappedbamindex).groupTuple(by: 2).view()

    f5c_e_i_16s = f5cindex_i_16s.out.fastqindex.mix(mappedbamindex_16s_ivt.out.mappedbamindex).groupTuple(by: 2).view()
    f5c_e_i_23s = f5cindex_i_23s.out.fastqindex.mix(mappedbamindex_23s_ivt.out.mappedbamindex).groupTuple(by: 2).view()
    
    
    f5ceventalign_n_16s(f5c_e_n_16s, reference_16s_ch)
    f5ceventalign_n_23s(f5c_e_n_23s, reference_23s_ch)

    f5ceventalign_i_16s(f5c_e_i_16s, reference_16s_ch)
    f5ceventalign_i_23s(f5c_e_i_23s, reference_23s_ch)

    f5c_e_n_16s = f5cindex_n_16s.out.fastqindex.mix(mappedbamindex_16s_native.out.mappedbamindex).groupTuple(by: 2).view()
    f5c_e_n_23s = f5cindex_n_23s.out.fastqindex.mix(mappedbamindex_23s_native.out.mappedbamindex).groupTuple(by: 2).view()

    f5c_e_i_16s = f5cindex_i_16s.out.fastqindex.mix(mappedbamindex_16s_ivt.out.mappedbamindex).groupTuple(by: 2).view()
    f5c_e_i_23s = f5cindex_i_23s.out.fastqindex.mix(mappedbamindex_23s_ivt.out.mappedbamindex).groupTuple(by: 2).view()


        f5c_e_n_16s[0][0].view()
    f5c_e_n_16s[0][1].view()
    f5c_e_n_16s[1][0].view()
    f5c_e_n_16s[1][1].view()
    f5c_e_n_16s[1][2].view()
    f5c_e_n_16s[1][3].view()
    f5c_e_n_16s[2].view()

    f5c_e_n_23s[0][0].view()
    f5c_e_n_23s[0][1].view()
    f5c_e_n_23s[1][0].view()
    f5c_e_n_23s[1][1].view()
    f5c_e_n_23s[1][2].view()
    f5c_e_n_23s[1][3].view()
    f5c_e_n_23s[2].view()

    f5c_e_i_16s[0][0].view()
    f5c_e_i_16s[0][1].view()
    f5c_e_i_16s[1][0].view()
    f5c_e_i_16s[1][1].view()
    f5c_e_i_16s[1][2].view()
    f5c_e_i_16s[1][3].view()
    f5c_e_i_16s[2].view()

    f5c_e_i_23s[0][0].view()
    f5c_e_i_23s[0][1].view()
    f5c_e_i_23s[1][0].view()
    f5c_e_i_23s[1][1].view()
    f5c_e_i_23s[1][2].view()
    f5c_e_i_23s[1][3].view()
    f5c_e_i_23s[2].view()


        f5ceventalign_n_16s(f5c_e_n_16s_transformed, reference_16s_ch)
    f5ceventalign_n_23s(f5c_e_n_23s_transformed, reference_23s_ch)

    f5ceventalign_i_16s(f5c_e_i_16s_transformed, reference_16s_ch)
    f5ceventalign_i_23s(f5c_e_i_23s_transformed, reference_23s_ch)

    tuple path(fastq), path(index), path(fai), path(gzi), path(readdb)
    tuple path(bam), path(bai)
    val rep

    code to add in:::

    f5c_e_n_16s = f5cindex_n_16s.out.fastqindex.mix(mappedbamindex_16s_native.out.mappedbamindex).groupTuple(by: 2)
    f5c_e_n_23s = f5cindex_n_23s.out.fastqindex.mix(mappedbamindex_23s_native.out.mappedbamindex).groupTuple(by: 2)

    f5c_e_i_16s = f5cindex_i_16s.out.fastqindex.mix(mappedbamindex_16s_ivt.out.mappedbamindex).groupTuple(by: 2)
    f5c_e_i_23s = f5cindex_i_23s.out.fastqindex.mix(mappedbamindex_23s_ivt.out.mappedbamindex).groupTuple(by: 2)

    // Optional - view the transformed items for verification
    f5c_e_n_16s.view { println "n_16s item: $it" }
    f5c_e_n_23s.view { println "n_23s item: $it" }
    f5c_e_i_16s.view { println "i_16s item: $it" }
    f5c_e_i_23s.view { println "i_23s item: $it" }

    // Define a function to transform the tuples
    def transformTuple = { item ->
        def bamFile = item[0][0] // BAM file
        def fastqFile = item[0][1] // FASTQ file
        def bamIndexFile = item[1][0] // BAM index file
        def fastqIndexFiles = item[1][1] // List of FASTQ index files
        def replicateNumber = item[2] // Replicate number

        // Create new tuples as per your requirement
        // Pair BAM file with BAM index
        def bamTuple = [bamFile, bamIndexFile]

        // Pair FASTQ file with FASTQ index files
        def fastqTuple = [fastqFile] + fastqIndexFiles

        return [bamTuple, fastqTuple, replicateNumber] // Return a list of the new tuples
    }

    // Apply the function to each of the four channels
    f5c_e_n_16s_transformed = f5c_e_n_16s.map(transformTuple)
    f5c_e_n_23s_transformed = f5c_e_n_23s.map(transformTuple)
    f5c_e_i_16s_transformed = f5c_e_i_16s.map(transformTuple)
    f5c_e_i_23s_transformed = f5c_e_i_23s.map(transformTuple)

    // Optional - view the transformed items for verification
    f5c_e_n_16s_transformed.view { println "Transformed n_16s item: $it" }
    f5c_e_n_23s_transformed.view { println "Transformed n_23s item: $it" }
    f5c_e_i_16s_transformed.view { println "Transformed i_16s item: $it" }
    f5c_e_i_23s_transformed.view { println "Transformed i_23s item: $it" }

    def flattenChannel = { tuple ->
        // Extract bam and its index
        def (bam, bai) = tuple[0]
        // Extract fastq and its indices
        def fastq = tuple[1][0]
        def index = tuple[1][1]
        def fai = tuple[1][2]
        def gzi = tuple[1][3]
        def readdb = tuple[1][4]
        // Extract the numeric value
        def rep = tuple[2]

        return [fastq, index, fai, gzi, readdb, bam, bai, rep]
    }

    f5c_e_n_16s_final = f5c_e_n_16s_transformed.map(flattenChannel)
    f5c_e_n_23s_final = f5c_e_n_23s_transformed.map(flattenChannel)
    f5c_e_i_16s_final = f5c_e_i_16s_transformed.map(flattenChannel)
    f5c_e_i_23s_final = f5c_e_i_23s_transformed.map(flattenChannel)

    // view the transformed items for verification
    f5c_e_n_16s_final.view { println "Final n_16s item: $it" }
    f5c_e_n_23s_final.view { println "Final n_23s item: $it" }
    f5c_e_i_16s_final.view { println "Final i_16s item: $it" }
    f5c_e_i_23s_final.view { println "Final i_23s item: $it" }

    f5ceventalign_n_16s(f5c_e_n_16s_final, reference_16s_ch)
    f5ceventalign_n_23s(f5c_e_n_23s_final, reference_23s_ch)

    f5ceventalign_i_16s(f5c_e_i_16s_final, reference_16s_ch)
    f5ceventalign_i_23s(f5c_e_i_23s_final, reference_23s_ch)