

process f5cindex {

    publishDir "$baseDir/data/fastqs" mode:'copy'

    tag "nanopolish index"

    input:
    path fast5s
    path fastq

    output:
    path "*.fastq.index", emit: reads_index_ch
	path "*.fastq.index.fai", emit: reads_fai_ch
	path "*.fastq.index.gzi", emit: reads_gzi_ch
	path "*.fastq.index.readdb", emit: reads_readdb_ch
    val true, emit: f5cindexout

    script:
    """
    f5c index -t 24 -d $fast5s $fastq
    """
}


process f5ceventalign {

    publishDir "$params.outdir/${fastq.simpleName}_f5c", mode:'copy'

    tag "nanopolish eventalign"

    input:
    tuple path(fastq), path(index), path(fai), path(gzi), path(readdb)
    tuple path(bam), path(bai)
    path referencefasta
    val flag

    output:
    path "*_summary.txt", emit: f5csummary_ch
    path "*_eventalign.txt", emit: f5ceventalign_ch
    val true, emit: f5ceventaligndone_ch

    script:
    """
    f5c eventalign --scale-events --signal-index --print-read-names --rna -r $fastq -b $bam -g $referencefasta --summary ${fastq.simpleName}_summary.txt --threads 40 > ${fastq.simpleName}_eventalign.txt
    """
}

fastqinput = [
        ("$baseDir/data/fastqs/sample.fastq"),
        ("$baseDir/data/fastqs/sample.fastq.index"),
        ("$baseDir/data/fastqs/sample.fastq.index.fai"),
        ("$baseDir/data/fastqs/sample.fastq.index.gzi"),
        ("$baseDir/data/fastqs/sample.fastq.index.readdb")
]
baminput = [
        file("$baseDir/data/bams/sample_sorted.bam"),
        file("$baseDir/data/bams/sample_sorted.bam.bai")
]


workflow{

    Channel
    .value(file("$baseDir/data/references/reference.fa"))
    .set {reference}

    Channel
    .fromPath("$baseDir/data/fast5s")
    .set {fast5s}

    f5cindex (fast5s, fastqs)

    f5ceventalign (fastqinput, baminput, reference, f5cindex1_n_16s.out.f5cindexout)

}

